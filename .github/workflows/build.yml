name: Build and Release

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: hamzafarouk/go2rtc  # Change this to your Docker Hub username

jobs:
  # Build Go binaries for multiple platforms
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: freebsd
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        # Create output directory
        mkdir -p dist
        
        # Set binary name with extension for Windows
        BINARY_NAME="go2rtc"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="go2rtc.exe"
        fi
        
        # Build with version info
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! "$VERSION" =~ ^v[0-9] ]]; then
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        
        # Build the binary
        go build -ldflags="-s -w -X main.version=$VERSION" -o "dist/$BINARY_NAME"
        
        # Create archive name
        ARCHIVE_NAME="go2rtc_${GOOS}_${GOARCH}"
        if [ -n "$GOARM" ]; then
          ARCHIVE_NAME="${ARCHIVE_NAME}v${GOARM}"
        fi
        
        # Create archive
        cd dist
        if [ "$GOOS" = "windows" ]; then
          zip "../${ARCHIVE_NAME}.zip" "$BINARY_NAME"
        else
          tar -czf "../${ARCHIVE_NAME}.tar.gz" "$BINARY_NAME"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
        path: |
          *.tar.gz
          *.zip

  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    needs: build-binaries
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=go2rtc
          org.opencontainers.image.description=Ultimate camera streaming application
          org.opencontainers.image.vendor=hamza-farouk

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}

  # Create GitHub release
  release:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
