name: Build and Push Docker Images

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: hamzafarouk/go2rtc  # Change this to your Docker Hub username

jobs:
  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=go2rtc
          org.opencontainers.image.description=Ultimate camera streaming application
          org.opencontainers.image.vendor=hamza-farouk
          org.opencontainers.image.source=https://github.com/hamza-farouk/go2rtc

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}

  # Test the Docker image
  test-docker:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Test Docker image
      run: |
        # Pull and test the built image
        docker run --rm --name go2rtc-test \
          -p 1984:1984 \
          -d ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Wait for the service to start
        sleep 10
        
        # Test if the service is responding
        curl -f http://localhost:1984/api/info || exit 1
        
        # Stop the test container
        docker stop go2rtc-test
        
        echo "âœ… Docker image test passed!"
